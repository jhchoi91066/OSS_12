from ast import Delete
from asyncio.windows_events import *
from asyncio.windows_events import NULL
from tkinter import *

global win
win = Tk()

win.title("Test")
win.option_add("*Fonts", "맑은고딕 25")
win.geometry("1280x800")

global canv
canv = Canvas(win, width = 1280, height = 800, background = 'white')
canv.pack(padx = 0, pady = 0)


win.bind("<Up>", mov)

class Point:            #점의 위치
    px = float()
    py = float()
    res = str()
    b = canv.create_oval(px - 4, py - 4, px + 4, py + 4, fill="black")

    def __init__(self, x, y):
        self.px = x
        self.py = y
        self.res = None
        canv.delete(self.b)
        self.b = canv.create_oval(self.px - 4, self.py - 4, self.px + 4, self.py + 4, fill="black")

    def setPoint(self, x, y):
        self.px = x
        self.py = y
        canv.delete(self.b)
        self.b = canv.create_oval(self.px - 4, self.py - 4, self.px + 4, self.py + 4, fill="black")


    def setRes(self, c):
        self.res = c
        


global End_ps
End_ps = []         #끝 점들 모음.


class Start_P(Point):
    nextP = []
    line = []


    def __init__(self, x, y):
        self.px = x
        self.py = y
        canv.delete(self.b)
        self.b = canv.create_oval(self.px - 4, self.py - 4, self.px + 4, self.py + 4, fill="black")
        
        canv.tag_bind(self.b, '<B1-Motion>', self.line_drawing)
        canv.tag_bind(self.b, '<ButtonRelease-1>', self.line_end)


    def __del__(self):
        canv.delete(self.b)


    def setnextP(self, k):
        self.nextP.append(k)
        self.nextP[len(self.line)-1].setRes(self.res)


    def del_all_line(self):
        while(len(self.line) == 0):
            if(type(self.nextP[0]) == Start_P):
                self.nextP.del_all_line()
                canv.delete(self.nextP[0])

            elif(type(self.nextP) == Point):
                self.nextP.setRes(None)

            del self.nextP[0]

        for i in range (len(self.line)):
            canv.delete(self.line[0])
            del self.line[0]

#=========================================================================================

    def line_drawing(self, event):
        for i in self.line:
           canv.delete(self.line)
        if(self.py <= self.px and self.py >= self.px * (-1)):
            self.line = canv.create_line(self.px, self.py, event.x, self.py, width=3)
            self.line
        elif(self.px <= self.py and self.px >= self.py * (-1)):
            self.line = canv.create_line(self.px, self.py, event.x, self.py, width=3)

        
    def line_end:


     

class gate:
    loca = Point(None, None)
    res = str()
    Inp1 = End_P(None, None)      #가 점의 중간 위치
    Inp2 = End_P(None, None)
    Outp = Start_P(None, None)

    def __init__(self, x):      #x는 gate가 처음 왼쪽에 놓일 곳.
        self.loca = x
        res = "A 연산자 B or A' "

    def move(self, x):          # 게이트 이동 - 클릭후 이동시켜 main에 놓을때 사용
        self.loca = x

    def linked(self, y):





class AND_gate(gate):

    def __init__(self):
        self.loca = Point()

    



arr = []
#arr.append(a)




#abc = Point()

#abc.px = 1

#abc.aaa()



win.mainloop()
